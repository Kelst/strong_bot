import fs from 'fs';
import path from 'path';
import { resetSessionSingle, searchOnuConfig, updateBillingDataSingle } from './tools.js';
import { getOltData1, getOntData1, getUserBillingData } from './api.js';
import { configureAndCheckOnu, restartOnuPort } from './telnet.js';

export function generateSfpTemplates(chatId, bot, sfpNumber) {
    try {
      
      // –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
      const config = generateSfpConfig(sfpNumber);
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —É —Ñ–∞–π–ª
      const fileName = `sfp_template_${sfpNumber}.txt`;
      const filePath = path.join(process.cwd(), fileName);
      fs.writeFileSync(filePath, config);
      
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–∞–π–ª –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
      bot.sendDocument(chatId, filePath, { caption: `–¢–µ–º–ø–ª–µ–π—Ç –¥–ª—è SFP ${sfpNumber}` })
        .then(() => {
          // –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
          fs.unlinkSync(filePath);
          bot.sendMessage(chatId, '–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ–º–ø–ª–µ–π—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ.');
        })
        .catch((error) => {
          console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ–∞–π–ª—É:', error);
          bot.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ–∞–π–ª—É.');
        });
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ–º–ø–ª–µ–π—Ç—É:', error);
      bot.sendMessage(chatId, `–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ–º–ø–ª–µ–π—Ç—É: ${error.message}`);
    }
  }
  
  function generateSfpConfig(sfpNumber) {
    let config = `interface EPON0/${sfpNumber}\n`;
    
    for (let i = 64; i >= 1; i--) {
      const param = i <= 9 ? `${sfpNumber}0${i}` : `${sfpNumber}${i}`;
      config += ` epon pre-config-template T1 binded-onu-llid ${i} param ${param}\n`;
    }
    
    return config;
  }
  
  export async function resetGuestSesion(chatId, bot) {
    const userId = chatId;
  
    const isValidLogin = (login) => /^[a-zA-Z0-9!@#$%^&*()_+\-=\[\]{};:'",.<>?]+$/.test(login);
    const isValidMac = (mac) => /^([0-9A-Fa-f]{4}[.]){2}[0-9A-Fa-f]{4}$/.test(mac);
  
    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    const returnToMainMenu = async () => {
      await bot.sendMessage(chatId, '–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', {
        reply_markup: {
          keyboard: [
            ['–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–µ–º–ø–ª–µ–π—Ç–∏ –¥–ª—è SFP'],
            ['–°–∫–∏–Ω—É—Ç–∏ –≥–æ—Å—Ç—å–æ–≤—É']
          ],
          resize_keyboard: true,
          one_time_keyboard: false
        }
      });
    };
  
    await bot.sendMessage(chatId, `
    üîê *–í–≤–µ–¥–µ–Ω–Ω—è –ª–æ–≥—ñ–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞*
    
    –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –¥–æ—Ç—Ä–∏–º–∞–Ω–Ω—è–º –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–∞–≤–∏–ª:
    
    ‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ª–∏—à–µ *–∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ –±—É–∫–≤–∏*
    ‚Ä¢ –ú–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ *—Ü–∏—Ñ—Ä–∏*
    ‚Ä¢ –î–æ–∑–≤–æ–ª–µ–Ω—ñ *—Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏*
    ‚Ä¢ ‚ùóÔ∏è –ë–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤
    
    _–ü—Ä–∏–∫–ª–∞–¥: user123 –∞–±–æ user_name_2023_
    
    –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –ª–æ–≥—ñ–Ω:
    `, { parse_mode: 'Markdown' });
  
    bot.once('message', async (msg) => {
      const login = msg.text.trim();
      if (!isValidLogin(login)) {
        await bot.sendMessage(chatId, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥—ñ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ –±—É–∫–≤–∏, —Ü–∏—Ñ—Ä–∏ —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤.");
        return resetGuestSesion(chatId, bot);
      }
  
      try {
        const billingData = await getUserBillingData(login);
        if (billingData) {
          const { uid, comments, login: userLogin } = billingData;
          let responseMessage = `
  üìä *–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞*
  üë§ *–õ–æ–≥—ñ–Ω:* \`${userLogin}\`
  üÜî *UID:* \`${uid}\`
  üí¨ *–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ:* ${comments ? `\n\n\`\`\`\n${comments}\n\`\`\`` : '_–í—ñ–¥—Å—É—Ç–Ω—ñ_'}
          `;
  
          await bot.sendMessage(chatId, responseMessage, { parse_mode: 'Markdown' });
  
          const macMatches = comments ? comments.match(/([0-9A-Fa-f]{4}[.]){2}[0-9A-Fa-f]{4}/g) : null;
          let selectedMac;
  
          if (macMatches && macMatches.length > 0) {
            if (macMatches.length === 1) {
              selectedMac = macMatches[0];
              await bot.sendMessage(chatId, `–ó–Ω–∞–π–¥–µ–Ω–æ MAC-–∞–¥—Ä–µ—Å—É ONU –≤ –∫–æ–º–µ–Ω—Ç–∞—Ä—è—Ö: ${selectedMac}`);
            } else {
              const keyboard = macMatches.map(mac => [{ text: mac }]);
              const reply_markup = { keyboard, one_time_keyboard: true, resize_keyboard: true };
              await bot.sendMessage(chatId, "–ó–Ω–∞–π–¥–µ–Ω–æ –∫—ñ–ª—å–∫–∞ MAC-–∞–¥—Ä–µ—Å. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É:", { reply_markup });
              
              const macResponse = await new Promise(resolve => bot.once('message', resolve));
              selectedMac = macResponse.text.trim();
              
              if (!macMatches.includes(selectedMac)) {
                await bot.sendMessage(chatId, "–í–∏–±—Ä–∞–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—É MAC-–∞–¥—Ä–µ—Å—É. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.");
                return returnToMainMenu();
              }
            }
          } else {
            await bot.sendMessage(chatId, "MAC-–∞–¥—Ä–µ—Å—É ONU –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–º–µ–Ω—Ç–∞—Ä—è—Ö. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å MAC-–∞–¥—Ä–µ—Å—É ONU –≤—Ä—É—á–Ω—É (—Ñ–æ—Ä–º–∞—Ç: XXXX.XXXX.XXXX):");
            
            const macResponse = await new Promise(resolve => bot.once('message', resolve));
            selectedMac = macResponse.text.trim();
            
            if (!isValidMac(selectedMac)) {
              await bot.sendMessage(chatId, "–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—É MAC-–∞–¥—Ä–µ—Å—É. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.");
              return returnToMainMenu();
            }
          }
  
          // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –≤–∏–±—Ä–∞–Ω–æ—é MAC-–∞–¥—Ä–µ—Å–æ—é
          const ontData = await getOntData1(selectedMac);
          if (ontData && ontData.iface_name && ontData.device_id && ontData.level_onu_rx !== undefined) {
            const oltData = await getOltData1(ontData.device_id);
            if (oltData && oltData.host && oltData.telnet_login && oltData.telnet_pass) {
              await bot.sendMessage(chatId, "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ONU...");
              
              try {
                const { vlan, macAddress: newMacAddress, activeOnu, pvid } = await configureAndCheckOnu(
                  oltData.host,
                  oltData.telnet_login,
                  oltData.telnet_pass,
                  ontData.iface_name
                );
            
                let statusMessage = `
            üì° *–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ONU*
            üîå *–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å:* \`${ontData.iface_name}\`
            üî¢ *VLAN:* \`${vlan}\`
               *Pvid:* \`${pvid}\`
            üìä *–†—ñ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª—É:* \`${ontData.level_onu_rx} dBm\`
            üñ•Ô∏è *IP OLT:* \`${oltData.host}\`
            üîó *–°—Ç–∞—Ç—É—Å ONU:* ${activeOnu ? 'üü¢ –ù–∞ –∑–≤\'—è–∑–∫—É' : 'üî¥ –ù–µ –Ω–∞ –∑–≤\'—è–∑–∫—É'}
            üíª *MAC-–∞–¥—Ä–µ—Å–∞:* \`${newMacAddress || '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}\`
                `;
            
                await bot.sendMessage(chatId, statusMessage, { parse_mode: 'Markdown' });
            
                if (activeOnu && newMacAddress) {
                  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ –±—ñ–ª—ñ–Ω–≥—É
                  const billingUpdateResult = await updateBillingDataSingle(billingData.uid, vlan, pvid, newMacAddress);
                  await bot.sendMessage(chatId, billingUpdateResult.message);
            
                  // –°–∫–∏–¥–∞–Ω–Ω—è —Å–µ—Å—ñ—ó
                  const sessionResetResult = await resetSessionSingle(billingData.uid, newMacAddress);
                  await bot.sendMessage(chatId,`
                  üîÑ *–ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Ä—Ç—É ONU*
                  
                  üì° –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å: \`${ontData.iface_name}\`
                  
                  ‚è≥ –ü—Ä–æ—Ü–µ—Å:
                  1. –í–∏–º–∫–Ω–µ–Ω–Ω—è –ø–æ—Ä—Ç—É
                  2. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è (2 —Å–µ–∫—É–Ω–¥–∏)
                  3. –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –ø–æ—Ä—Ç—É
                  üïí –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ. –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥...
                  `);
                 const result=await restartOnuPort( oltData.host,
                  oltData.telnet_login,
                  oltData.telnet_pass,
                  ontData.iface_name)
                  function formatOnuRestartMessage(sessionResetResult, result) {
                    const sessionStatus = sessionResetResult.success ? '‚úÖ' : '‚ùå';
                    
                    let message = `
                  üîÑ *ONU Restart Results*
                  
                  ${sessionStatus} *Session Reset:* ${sessionResetResult.message}
                  
                  *ONU Configuration:*
                  \`\`\`
                  ${JSON.stringify(result, null, 2)}
                  \`\`\`
                  `;
                  
                    return message.trim();
                  }
                  const formattedMessage = formatOnuRestartMessage(sessionResetResult, result);

                  await bot.sendMessage(chatId, formattedMessage, { parse_mode: 'Markdown' });
                } else {
                  await bot.sendMessage(chatId, "‚ö†Ô∏è ONU –Ω–µ –Ω–∞ –∑–≤'—è–∑–∫—É –∞–±–æ MAC-–∞–¥—Ä–µ—Å—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –≤ –±—ñ–ª—ñ–Ω–≥—É —Ç–∞ —Å–∫–∏–Ω—É—Ç–∏ —Å–µ—Å—ñ—é.");
                }
            
              } catch (error) {
                console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ ONU:", error);
                await bot.sendMessage(chatId, `‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ ONU: ${error.message}`);
              }
            } else {
              await bot.sendMessage(chatId, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ OLT.");
            }
          } else {
            await bot.sendMessage(chatId, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ ONU.");
          }
        } else {
          await bot.sendMessage(chatId, "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º –ª–æ–≥—ñ–Ω–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
        }
      } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö:", error);
        await bot.sendMessage(chatId, "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
      }
  
      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
      returnToMainMenu();
    });
  }
  export function configureIpoeVlan() {
    // –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è IPoE VLAN
  }
  
 